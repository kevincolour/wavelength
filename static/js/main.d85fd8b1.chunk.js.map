{"version":3,"sources":["serviceWorker.ts","components/hooks/useStorageBackedState.tsx","state/RandomSpectrumTarget.ts","state/RandomFourCharacterString.ts","state/GameState.ts","components/common/LayoutElements.tsx","components/common/GetContrastingColors.ts","components/common/Title.tsx","components/gameplay/InputName.tsx","state/GameModelContext.ts","components/common/GetContrastingText.ts","components/common/Spectrum.tsx","components/common/Button.tsx","components/common/Info.tsx","components/common/Animate.tsx","components/gameplay/GiveClue.tsx","state/GetScore.ts","state/ScoreRound.ts","components/gameplay/MakeGuess.tsx","TrackEvent.ts","state/BuildGameModel.ts","state/NewRound.ts","components/gameplay/ViewScore.tsx","components/gameplay/JoinTeam.tsx","state/NewGame.ts","components/gameplay/Scoreboard.tsx","components/gameplay/SetupGame.tsx","components/gameplay/CounterGuess.tsx","components/gameplay/ActiveGame.tsx","components/common/RoomIdHeader.tsx","components/gameplay/FakeRooms.tsx","components/gameplay/GameRoom.tsx","components/hooks/useNetworkBackedGameState.tsx","components/common/CommonFooter.tsx","i18n.tsx","components/common/LandingPage.tsx","components/App.tsx","index.tsx","firebaseConfig.ts"],"names":["Boolean","window","location","hostname","match","useStorageBackedState","initialValue","key","storedItem","localStorage","getItem","setItem","JSON","stringify","parse","value","setValue","useState","newValue","RandomSpectrumTarget","Math","floor","random","RandomFourCharacterString","characters","randomString","i","RoundPhase","GameType","Team","TeamReverse","team","Left","Right","Unset","TeamName","t","InitialGameState","deckLanguage","gameType","Teams","roundPhase","SetupGame","turnsTaken","deckSeed","deckIndex","spectrumTarget","clue","guess","counterGuess","players","clueGiver","leftScore","rightScore","coopScore","coopBonusTurns","previousTurn","allPlayersDone","baseFlexStyles","display","flexFlow","justifyContent","alignItems","CenteredRow","props","_jsx","style","children","CenteredColumn","ColorScheme","require","GetContrastingColors","hue","scheme","from_hue","variation","primary","secondary","colors","LongwaveAppTitle","useTranslation","setHue","useEffect","interval","setInterval","clearInterval","backgroundImage","concat","WebkitBackgroundClip","WebkitTextFillColor","InputName","inputRef","useRef","_jsxs","type","margin","ref","onKeyDown","event","current","setName","GameModelContext","createContext","gameState","localPlayer","id","name","spectrumCard","setGameState","newState","console","warn","setPlayerName","GetContrastingText","colorHex","threshold","arguments","length","undefined","rgb","hex","result","exec","r","parseInt","g","b","hex2Rgb","_ref","rgb2YIQ","Spectrum","acc","charCodeAt","getStringHash","cardBackStyle","padding","fontWeight","primaryText","secondaryText","handleStyle","height","width","backgroundColor","borderColor","dotStyle","cursor","bottom","borderWidth","transform","onChange","boxShadow","handleValue","marks","targetValue","color","label","guessingValue","Slider","min","max","trackStyle","railStyle","background","Button","text","onClick","disabled","Info","Tippy","content","placement","FontAwesomeIcon","icon","faInfoCircle","Animate","className","setClassName","animation","setTimeout","GiveClue","_inputElement$current","_inputElement$current2","useContext","inputElement","disableSubmit","setDisableSubmit","givername","submit","_inputElement$current3","_inputElement$current4","MakeGuess","Cooperative","redrawCard","_inputElement$current5","_inputElement$current6","GetScore","target","difference","abs","ScoreTeamRound","guessingTeam","pointsScored","wasCounterGuessCorrect","finalState","ViewScore","spectrumValue","setSpectrumValue","React","notMyTurn","Object","keys","border","game_url","href","guessSubmitted","onClickHandler","eventName","eventBody","spectrum_card","join","toString","firebase","analytics","logEvent","app_name","screen_name","CounterGuess","effectivePointsScored","ScoreCoopRound","newPlayersObj","isAllDoneGuessing","every","shuffleSeed","getSeededDeck","memoize","seed","cards","shuffle","BuildGameModel","localPlayerId","tSpectrumCards","AllCards","returnObjects","spectrumDeck","NewRound","playerId","gameModel","forEach","clueGiverName","score","bonusCoopTurn","total","_gameState$players$ke","avgValue","borderBottom","Trans","i18nKey","components","strong","NextTurnOrEndGame","i18n","cardsTranslation","resetButton","language","_Fragment","winnerteam","scoringTeamString","bonusTurn","nextTeam","eligibleToDraw","scoringteam","JoinTeam","leftTeam","filter","rightTeam","joinTeam","alignSelf","map","PickTeams","startGame","startPlayer","initialScores","NewTeamGame","Scoreboard","borderTop","paddingTop","Freeplay","flexWrap","player","toPlayerRow","cardsRemaining","TeamColumn","members","AnimatableScore","lastScore","position","fontSize","top","right","PlayerRow","hovered","setHovered","styles","marginLeft","onMouseEnter","onMouseLeave","counterGuessTeamString","guessteam","ActiveGame","RoomIdHeader","roomId","useParams","RoomMenu","interactive","tabIndex","faCogs","menuItemProps","faUndo","faUserEdit","FakeRooms","ul","ll","ur","lr","setPartialGameState","renderGame","Provider","left","GameRoom","_gameState$players","Error","playerName","dbRef","database","on","appState","networkGameState","val","completeGameState","set","off","useNetworkBackedGameState","changeLanguage","searchParams","URLSearchParams","search","get","rocketcrabPlayerName","CommonFooter","Link","rel","allLanguages","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","detection","order","caches","interpolation","escapeValue","LandingPage","history","useHistory","push","LanguageMenu","Tooltip","sticky","html","Languages","size","faLanguage","maxWidth","App","BrowserRouter","Switch","Route","path","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","databaseURL","ReactDOM","render","StrictMode","Suspense","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d85fd8b1.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport function useStorageBackedState<T>(\r\n  initialValue: T,\r\n  key: string\r\n): [T, (value: T) => void] {\r\n  const storedItem = localStorage.getItem(key);\r\n  if (storedItem == null) {\r\n    localStorage.setItem(key, JSON.stringify(initialValue));\r\n  } else {\r\n    initialValue = JSON.parse(storedItem);\r\n  }\r\n\r\n  const [value, setValue] = useState(initialValue);\r\n\r\n  return [\r\n    value,\r\n    (newValue: T) => {\r\n      localStorage.setItem(key, JSON.stringify(newValue));\r\n      setValue(newValue);\r\n    },\r\n  ];\r\n}\r\n","export function RandomSpectrumTarget() {\r\n  return Math.floor(Math.random() * 21);\r\n}\r\n","export function RandomFourCharacterString() {\r\n  const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\";\r\n  let randomString = \"\";\r\n  for (let i = 0; i < 4; i++) {\r\n    randomString += characters[Math.floor(Math.random() * characters.length)];\r\n  }\r\n  return randomString;\r\n}\r\n","import { RandomSpectrumTarget } from \"./RandomSpectrumTarget\";\r\nimport { RandomFourCharacterString } from \"./RandomFourCharacterString\";\r\nimport { TFunction } from \"i18next\";\r\n\r\nexport enum RoundPhase {\r\n  SetupGame,\r\n  PickTeams,\r\n  GiveClue,\r\n  MakeGuess,\r\n  CounterGuess,\r\n  ViewScore,\r\n}\r\n\r\nexport enum GameType {\r\n  Teams,\r\n  Cooperative,\r\n  Freeplay,\r\n}\r\n\r\nexport enum Team {\r\n  Unset,\r\n  Left,\r\n  Right,\r\n}\r\n\r\nexport function TeamReverse(team: Team) {\r\n  if (team === Team.Left) {\r\n    return Team.Right;\r\n  }\r\n  if (team === Team.Right) {\r\n    return Team.Left;\r\n  }\r\n  return Team.Unset;\r\n}\r\n\r\nexport function TeamName(team: Team, t: TFunction<string>) {\r\n  if (team === Team.Left) {\r\n    return t(\"gamestate.left_brain\");\r\n  }\r\n  if (team === Team.Right) {\r\n    return t(\"gamestate.right_brain\");\r\n  }\r\n  return t(\"gamestate.the_player\");\r\n}\r\n\r\nexport type PlayersTeams = {\r\n  [playerId: string]: {\r\n    name: string;\r\n    team: Team;\r\n    guess?: number;\r\n  };\r\n};\r\n\r\nexport type TurnSummaryModel = {\r\n  spectrumCard: [string, string];\r\n  clueGiverName: string;\r\n  clue: string;\r\n  spectrumTarget: number;\r\n  guess: number;\r\n};\r\n\r\nexport interface GameState {\r\n  gameType: GameType;\r\n  roundPhase: RoundPhase;\r\n  turnsTaken: number;\r\n  deckSeed: string;\r\n  deckIndex: number;\r\n  spectrumTarget: number;\r\n  clue: string;\r\n  guess: number;\r\n  counterGuess: \"left\" | \"right\";\r\n  players: PlayersTeams;\r\n  clueGiver: string;\r\n  leftScore: number;\r\n  rightScore: number;\r\n  coopScore: number;\r\n  coopBonusTurns: number;\r\n  previousTurn: TurnSummaryModel | null;\r\n  deckLanguage: string | null;\r\n  allPlayersDone: boolean;\r\n}\r\n\r\nexport function InitialGameState(deckLanguage: string): GameState {\r\n  return {\r\n    gameType: GameType.Teams,\r\n    roundPhase: RoundPhase.SetupGame,\r\n    turnsTaken: -1,\r\n    deckSeed: RandomFourCharacterString(),\r\n    deckIndex: 0,\r\n    spectrumTarget: RandomSpectrumTarget(),\r\n    clue: \"\",\r\n    guess: 0,\r\n    counterGuess: \"left\",\r\n    players: {},\r\n    clueGiver: \"\",\r\n    leftScore: 0,\r\n    rightScore: 0,\r\n    coopScore: 0,\r\n    coopBonusTurns: 0,\r\n    previousTurn: null,\r\n    deckLanguage: deckLanguage,\r\n    allPlayersDone: false\r\n  };\r\n}\r\n","import React from \"react\";\r\n\r\nconst baseFlexStyles: React.CSSProperties = {\r\n  display: \"flex\",\r\n  flexFlow: \"row\",\r\n  justifyContent: \"space-evenly\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nexport function CenteredRow(props: {\r\n  children: React.ReactNode;\r\n  style?: React.CSSProperties;\r\n}) {\r\n  return (\r\n    <div\r\n      style={{\r\n        ...baseFlexStyles,\r\n        flexFlow: \"row\",\r\n        ...props.style,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function CenteredColumn(props: {\r\n  children: React.ReactNode;\r\n  style?: React.CSSProperties;\r\n}) {\r\n  return (\r\n    <div\r\n      style={{\r\n        ...baseFlexStyles,\r\n        flexFlow: \"column\",\r\n        ...props.style,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n","const ColorScheme: any = require(\"color-scheme\");\r\n\r\nexport function GetContrastingColors(hue: number): [string, string] {\r\n  const scheme = new ColorScheme();\r\n  scheme.from_hue(hue).scheme(\"contrast\").variation(\"soft\");\r\n  const [primary, , , , secondary]: string[] = scheme.colors();\r\n  return [\"#\" + primary, \"#\" + secondary];\r\n}\r\n","import React from \"react\";\r\nimport { GetContrastingColors } from \"./GetContrastingColors\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport function LongwaveAppTitle() {\r\n  const { t } = useTranslation();\r\n  const [hue, setHue] = useState(0);\r\n  const [primary, secondary] = GetContrastingColors(hue);\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setHue((hue) => (hue + 1) % 360);\r\n    }, 5);\r\n    return () => clearInterval(interval);\r\n  });\r\n  return (\r\n    <h1\r\n      style={{\r\n        backgroundImage: `linear-gradient(90deg, ${primary} 10%, ${secondary} 90%)`,\r\n        WebkitBackgroundClip: \"text\",\r\n        WebkitTextFillColor: \"transparent\",\r\n      }}\r\n    >\r\n      {t(\"title.longwave\")}\r\n    </h1>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { CenteredColumn } from \"../common/LayoutElements\";\r\nimport { LongwaveAppTitle } from \"../common/Title\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport function InputName(props: { setName: (name: string) => void }) {\r\n  const { t } = useTranslation();\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n  return (\r\n    <CenteredColumn>\r\n      <LongwaveAppTitle />\r\n      <div>{t(\"inputname.your_name\")}:</div>\r\n      <input\r\n        type=\"text\"\r\n        style={{ margin: 16 }}\r\n        ref={inputRef}\r\n        onKeyDown={(event) => {\r\n          if (!inputRef.current) {\r\n            return false;\r\n          }\r\n          if (event.key !== \"Enter\") {\r\n            return true;\r\n          }\r\n          props.setName(inputRef.current.value);\r\n        }}\r\n      />\r\n    </CenteredColumn>\r\n  );\r\n}\r\n","import { Team, InitialGameState } from \"./GameState\";\r\nimport { createContext } from \"react\";\r\nimport { GameModel } from \"./BuildGameModel\";\r\n\r\nexport const GameModelContext = createContext<GameModel>({\r\n  gameState: InitialGameState(\"en\"),\r\n  localPlayer: {\r\n    id: \"localPlayer\",\r\n    name: \"Player\",\r\n    team: Team.Unset,\r\n  },\r\n  clueGiver: null,\r\n  spectrumCard: [\"left\", \"right\"],\r\n  setGameState: (newState) => {\r\n    console.warn(\r\n      \"GameModelContext not provided. Got setGameState: \" +\r\n        JSON.stringify(newState)\r\n    );\r\n  },\r\n  setPlayerName: () => {},\r\n});\r\n","interface RGB {\r\n  b: number;\r\n  g: number;\r\n  r: number;\r\n}\r\n\r\nfunction hex2Rgb(hex: string): RGB | undefined {\r\n  if (!hex || hex === undefined || hex === '') {\r\n      return undefined;\r\n  }\r\n\r\n  const result: RegExpExecArray | null =\r\n        /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n\r\n  return result ? {\r\n      r: parseInt(result[1], 16),\r\n      g: parseInt(result[2], 16),\r\n      b: parseInt(result[3], 16)\r\n  } : undefined;\r\n}\r\n\r\nfunction rgb2YIQ({ r, g, b }: RGB): number {\r\n  return ((r * 299) + (g * 587) + (b * 114)) / 1000;\r\n}\r\n\r\nexport function GetContrastingText(colorHex: string | undefined,\r\n                       threshold: number = 128): string {\r\n  if (colorHex === undefined) {\r\n      return '#000';\r\n  }\r\n\r\n  const rgb: RGB | undefined = hex2Rgb(colorHex);\r\n\r\n  if (rgb === undefined) {\r\n      return '#000';\r\n  }\r\n\r\n  return rgb2YIQ(rgb) >= threshold ? '#000' : '#fff';\r\n}","import React from \"react\";\r\nimport Slider from \"rc-slider\";\r\nimport { CenteredColumn, CenteredRow } from \"./LayoutElements\";\r\nimport { GetContrastingColors } from \"./GetContrastingColors\";\r\nimport { GetContrastingText } from \"./GetContrastingText\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport function Spectrum(props: {\r\n  spectrumCard: [string, string];\r\n  handleValue?: number;\r\n  targetValue?: number;\r\n  guessingValue?: number;\r\n  onChange?: (newValue: number) => void;\r\n}) {\r\n  const { t } = useTranslation();\r\n\r\n  const [primary, secondary] = GetContrastingColors(\r\n    getStringHash(props.spectrumCard[0])\r\n  );\r\n  const cardBackStyle: React.CSSProperties = {\r\n    padding: 8,\r\n    fontWeight: \"bold\",\r\n  };\r\n  const primaryText = GetContrastingText(primary);\r\n  const secondaryText = GetContrastingText(secondary);\r\n\r\n  let handleStyle: React.CSSProperties = {\r\n    height: 18,\r\n    width: 18,\r\n    backgroundColor: \"rgba(255,255,255,0.8)\",\r\n    borderColor: \"black\",\r\n  };\r\n\r\n  const dotStyle = {\r\n    ...handleStyle,\r\n    cursor: \"auto\",\r\n    bottom: -9,\r\n    borderWidth: 4,\r\n    transform: \"translateX(-5px)\",\r\n  };\r\n\r\n  if (!props.onChange) {\r\n    handleStyle.cursor = \"auto\";\r\n    handleStyle.boxShadow = \"none\";\r\n  }\r\n\r\n  if (props.handleValue === undefined) {\r\n    handleStyle.display = \"none\";\r\n  }\r\n\r\n  let marks: {\r\n    [n: number]: { style: React.CSSProperties; label: string };\r\n  } = {};\r\n\r\n  if (\r\n    props.targetValue !== undefined &&\r\n    props.targetValue == props.handleValue\r\n  ) {\r\n  } else if (props.targetValue !== undefined) {\r\n    marks[props.targetValue] = {\r\n      style: { fontWeight: \"bold\", color: \"black\", cursor: \"auto\" },\r\n      label: t(\"spectrum.target\"),\r\n    };\r\n  }\r\n\r\n  if (props.guessingValue !== undefined) {\r\n    marks[props.guessingValue] = {\r\n      style: { fontWeight: \"bold\", color: \"black\", cursor: \"auto\" },\r\n      label: t(\"spectrum.guessing\"),\r\n    };\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: 8 }}>\r\n      <CenteredColumn style={{ alignItems: \"stretch\" }}>\r\n        <CenteredRow style={{ justifyContent: \"space-between\" }}>\r\n          <div\r\n            style={{\r\n              ...cardBackStyle,\r\n              backgroundColor: primary,\r\n              color: primaryText,\r\n            }}\r\n          >\r\n            {props.spectrumCard[0]}\r\n          </div>\r\n          <div\r\n            style={{\r\n              ...cardBackStyle,\r\n              backgroundColor: secondary,\r\n              color: secondaryText,\r\n            }}\r\n          >\r\n            {props.spectrumCard[1]}\r\n          </div>\r\n        </CenteredRow>\r\n        <div style={{ padding: \"16px 32px\" }}>\r\n          <Slider\r\n            min={0}\r\n            max={20}\r\n            value={props.handleValue}\r\n            trackStyle={{\r\n              backgroundColor: \"transparent\",\r\n            }}\r\n            railStyle={{\r\n              background: `linear-gradient(90deg, ${primary} 0%, ${secondary} 100%)`,\r\n              height: 8,\r\n            }}\r\n            handleStyle={handleStyle}\r\n            onChange={props.onChange}\r\n            marks={marks}\r\n            dotStyle={dotStyle}\r\n          />\r\n        </div>\r\n      </CenteredColumn>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getStringHash(value: string) {\r\n  let acc = 0;\r\n  for (let i = 0; i < value.length; i++) {\r\n    acc += value.charCodeAt(i);\r\n  }\r\n  return acc;\r\n}\r\n","import React from \"react\";\r\n\r\nexport function Button(props: {\r\n  text: string;\r\n  onClick: () => void;\r\n  disabled?: boolean;\r\n}) {\r\n  return (\r\n    <input\r\n      style={{\r\n        padding: 8,\r\n        margin: 8,\r\n      }}\r\n      type=\"button\"\r\n      value={props.text}\r\n      onClick={props.onClick}\r\n      disabled={props.disabled}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Tippy from \"@tippyjs/react\";\r\nimport { ReactElement } from \"react\";\r\n\r\nexport function Info(props: { children: string | ReactElement<any> }) {\r\n  return (\r\n    <Tippy content={props.children} placement=\"bottom\">\r\n      <div style={{ margin: 8 }}>\r\n        <FontAwesomeIcon icon={faInfoCircle} />\r\n      </div>\r\n    </Tippy>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nexport function Animate(props: {\r\n  children: React.ReactNode;\r\n  animation: \"wipe-reveal-right\" | \"fade-disappear-up\";\r\n  style?: React.CSSProperties;\r\n}) {\r\n  const [className, setClassName] = useState<string>(props.animation);\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      return setClassName(props.animation + \" animate\");\r\n    });\r\n  });\r\n\r\n  return (\r\n    <div className={className} style={props.style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef, useContext, useState } from \"react\";\r\n\r\nimport { GameType, RoundPhase } from \"../../state/GameState\";\r\nimport { Spectrum } from \"../common/Spectrum\";\r\nimport { CenteredColumn, CenteredRow } from \"../common/LayoutElements\";\r\nimport { Button } from \"../common/Button\";\r\nimport { GameModelContext } from \"../../state/GameModelContext\";\r\nimport { RandomSpectrumTarget } from \"../../state/RandomSpectrumTarget\";\r\nimport { Info } from \"../common/Info\";\r\nimport { Animate } from \"../common/Animate\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport function GiveClue() {\r\n  const { t } = useTranslation();\r\n  const { gameState, localPlayer, clueGiver, spectrumCard, setGameState } =\r\n    useContext(GameModelContext);\r\n  const inputElement = useRef<HTMLInputElement>(null);\r\n  const [disableSubmit, setDisableSubmit] = useState(\r\n    !inputElement.current?.value?.length\r\n  );\r\n\r\n  if (!clueGiver) {\r\n    setGameState({\r\n      clueGiver: localPlayer.id,\r\n    });\r\n    return null;\r\n  }\r\n\r\n  if (localPlayer.id !== clueGiver.id) {\r\n    return (\r\n      <div>\r\n        <Animate animation=\"wipe-reveal-right\">\r\n          <Spectrum spectrumCard={spectrumCard} />\r\n        </Animate>\r\n        <CenteredColumn>\r\n          <div>\r\n            {t(\"giveclue.waiting_for_clue\", { givername: clueGiver.name })}\r\n          </div>\r\n        </CenteredColumn>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const submit = () => {\r\n    if (!inputElement.current?.value?.length) {\r\n      return false;\r\n    }\r\n\r\n    setGameState({\r\n      clue: inputElement.current.value,\r\n      guess: 10,\r\n      roundPhase: RoundPhase.MakeGuess,\r\n    });\r\n  };\r\n\r\n  const redrawCard = () =>\r\n    setGameState({\r\n      deckIndex: gameState.deckIndex + 1,\r\n      spectrumTarget: RandomSpectrumTarget(),\r\n    });\r\n\r\n  return (\r\n    <div>\r\n      {gameState.gameType !== GameType.Cooperative && (\r\n        <CenteredColumn style={{ alignItems: \"flex-end\" }}>\r\n          <Button text={t(\"giveclue.draw_other_hand\")} onClick={redrawCard} />\r\n        </CenteredColumn>\r\n      )}\r\n      <Animate animation=\"wipe-reveal-right\">\r\n        <Spectrum\r\n          targetValue={gameState.spectrumTarget}\r\n          spectrumCard={spectrumCard}\r\n        />\r\n      </Animate>\r\n      <CenteredColumn>\r\n        <CenteredRow>\r\n          <input\r\n            type=\"text\"\r\n            ref={inputElement}\r\n            onKeyDown={(event) => {\r\n              if (event.key !== \"Enter\") {\r\n                return true;\r\n              }\r\n              submit();\r\n            }}\r\n            onChange={() =>\r\n              setDisableSubmit(!inputElement.current?.value?.length)\r\n            }\r\n          />\r\n          <Info>\r\n            <div>\r\n              {t(\"giveclue.instructions\")}\r\n              <ul>\r\n                <li>{t(\"giveclue.focus1\")}</li>\r\n                <li>{t(\"giveclue.focus2\")}</li>\r\n                <li>{t(\"giveclue.focus3\")}</li>\r\n                <li>{t(\"giveclue.focus4\")}</li>\r\n              </ul>\r\n            </div>\r\n          </Info>\r\n        </CenteredRow>\r\n        <Button\r\n          text={t(\"giveclue.give_clue\")}\r\n          onClick={submit}\r\n          disabled={disableSubmit}\r\n        />\r\n      </CenteredColumn>\r\n    </div>\r\n  );\r\n}\r\n","export function GetScore(target: number, guess: number) {\r\n  const difference = Math.abs(target - guess);\r\n  if (difference > 2) {\r\n    return 0;\r\n  }\r\n  return 4 - Math.floor(difference);\r\n}\r\n","import { GameState, RoundPhase, Team } from \"./GameState\";\r\nimport { GetScore } from \"./GetScore\";\r\n\r\nexport function ScoreCoopRound(gameState: GameState): Partial<GameState> {\r\n  const effectivePointsScored = GetScore(\r\n    gameState.spectrumTarget,\r\n    gameState.guess\r\n  );\r\n  let finalState: Partial<GameState> = {\r\n    roundPhase: RoundPhase.ViewScore,\r\n  };\r\n\r\n  if (effectivePointsScored === 4) {\r\n    finalState.coopScore = gameState.coopScore + 3;\r\n    finalState.coopBonusTurns = gameState.coopBonusTurns + 1;\r\n  } else {\r\n    finalState.coopScore = gameState.coopScore + effectivePointsScored;\r\n  }\r\n\r\n  return finalState;\r\n}\r\n\r\nexport function ScoreTeamRound(\r\n  gameState: GameState,\r\n  guessingTeam: Team,\r\n  counterGuess: \"left\" | \"right\"\r\n): Partial<GameState> {\r\n  const pointsScored = GetScore(gameState.spectrumTarget, gameState.guess);\r\n  const wasCounterGuessCorrect =\r\n    (counterGuess === \"left\" && gameState.spectrumTarget < gameState.guess) ||\r\n    (counterGuess === \"right\" && gameState.spectrumTarget > gameState.guess);\r\n\r\n  let finalState: Partial<GameState> = {\r\n    roundPhase: RoundPhase.ViewScore,\r\n    counterGuess,\r\n  };\r\n\r\n  if (guessingTeam === Team.Right) {\r\n    finalState.rightScore = gameState.rightScore + pointsScored;\r\n    finalState.leftScore =\r\n      gameState.leftScore + (wasCounterGuessCorrect ? 1 : 0);\r\n  }\r\n\r\n  if (guessingTeam === Team.Left) {\r\n    finalState.leftScore = gameState.leftScore + pointsScored;\r\n    finalState.rightScore =\r\n      gameState.rightScore + (wasCounterGuessCorrect ? 1 : 0);\r\n  }\r\n\r\n  return finalState;\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { GameType, RoundPhase, TeamName } from \"../../state/GameState\";\r\nimport { Spectrum } from \"../common/Spectrum\";\r\nimport { CenteredColumn } from \"../common/LayoutElements\";\r\nimport { Button } from \"../common/Button\";\r\nimport { GameModelContext } from \"../../state/GameModelContext\";\r\nimport { RecordEvent } from \"../../TrackEvent\";\r\nimport { ScoreCoopRound } from \"../../state/ScoreRound\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport function MakeGuess() {\r\n  const { t } = useTranslation();\r\n  const { gameState, localPlayer, clueGiver, spectrumCard, setGameState } =\r\n    useContext(GameModelContext);\r\n  const [spectrumValue, setSpectrumValue] = React.useState(10);\r\n  if (!clueGiver) {\r\n    return null;\r\n  }\r\n\r\n  const notMyTurn =\r\n    localPlayer.id === clueGiver.id ||\r\n    (gameState.gameType === GameType.Teams &&\r\n      localPlayer.team !== clueGiver.team);\r\n\r\n  const guessingTeamString = TeamName(clueGiver.team, t);\r\n\r\n  if (notMyTurn) {\r\n    return (\r\n      <div>\r\n        <Spectrum spectrumCard={spectrumCard} guessingValue={gameState.guess} />\r\n        <CenteredColumn>\r\n          <div>\r\n            {t(\"makeguess.players_clue\", { givername: clueGiver.name })}:{\" \"}\r\n            <strong>{gameState.clue}</strong>\r\n          </div>\r\n          <div>Waiting for all the players to guess...</div>\r\n          {Object.keys(gameState.players).length < 2 && (\r\n            <div\r\n              style={{\r\n                margin: 12,\r\n                padding: \"0 1em\",\r\n                border: \"1px solid black\",\r\n              }}\r\n            >\r\n              <p>{t(\"makeguess.invite_other_players\")}</p>\r\n              <p>\r\n                {t(\"makeguess.share_game_url\", {\r\n                  game_url: window.location.href,\r\n                })}\r\n              </p>\r\n            </div>\r\n          )}\r\n        </CenteredColumn>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const onClickHandler = () => {\r\n    RecordEvent(\"guess_submitted\", {\r\n      spectrum_card: spectrumCard.join(\"|\"),\r\n      clue: gameState.clue,\r\n      target: gameState.spectrumTarget.toString(),\r\n      guess: gameState.guess.toString(),\r\n    });\r\n    if (gameState.gameType === GameType.Teams) {\r\n      setGameState({\r\n        roundPhase: RoundPhase.CounterGuess,\r\n      });\r\n    } else if (gameState.gameType === GameType.Cooperative) {\r\n      setGameState(ScoreCoopRound(gameState));\r\n    } else {\r\n      const newPlayersObj = {\r\n        ...gameState.players[localPlayer.id],\r\n        guess: spectrumValue,\r\n      };\r\n      const isAllDoneGuessing = Object.keys(gameState.players).every((key) => {\r\n        return (\r\n          gameState.players[key].guess != undefined ||\r\n          gameState.players[key].name === clueGiver.name ||\r\n          localPlayer.name === gameState.players[key].name\r\n        );\r\n      });\r\n      if (isAllDoneGuessing) {\r\n        setGameState({\r\n          roundPhase: RoundPhase.ViewScore,\r\n          players: {\r\n            ...gameState.players,\r\n            [localPlayer.id]: newPlayersObj,\r\n          },\r\n        });\r\n      } else {\r\n        setGameState({\r\n          // roundPhase: RoundPhase.ViewScore,\r\n          players: {\r\n            ...gameState.players,\r\n            [localPlayer.id]: newPlayersObj,\r\n          },\r\n        });\r\n      }\r\n    }\r\n  };\r\n  const guessSubmitted = gameState.players[localPlayer.id].guess != undefined;\r\n\r\n  const onChangeHandler = (guess: number) => {\r\n    !guessSubmitted && setSpectrumValue(guess);\r\n  };\r\n  return (\r\n    <div>\r\n      <Spectrum\r\n        spectrumCard={spectrumCard}\r\n        handleValue={spectrumValue}\r\n        // onChange={(guess: number) => {\r\n        //   setGameState({\r\n        //     guess,\r\n        //   });\r\n        onChange={onChangeHandler}\r\n      />\r\n      <CenteredColumn>\r\n        <div>\r\n          {t(\"makeguess.players_clue\", { givername: clueGiver.name })}:{\" \"}\r\n          <strong>{gameState.clue}</strong>\r\n        </div>\r\n        <div>\r\n          {guessSubmitted && <div>guess submitted </div>}\r\n          {!guessSubmitted && (\r\n            <Button text={t(\"makeguess.guess\", {})} onClick={onClickHandler} />\r\n          )}\r\n        </div>\r\n      </CenteredColumn>\r\n    </div>\r\n  );\r\n}\r\n","import firebase from \"firebase/app\";\r\nimport \"firebase/analytics\";\r\n\r\nexport function RecordEvent(\r\n  eventName: string,\r\n  eventBody: { [parameterName: string]: string }\r\n) {\r\n  firebase.analytics().logEvent(eventName, {\r\n    app_name: \"Longwave\",\r\n    screen_name: \"index\",\r\n    ...eventBody,\r\n  });\r\n}\r\n","import { GameState, Team } from \"./GameState\";\r\nimport memoize from \"lodash/memoize\";\r\nimport { TFunction } from \"i18next\";\r\n\r\nconst shuffleSeed: {\r\n  shuffle: <T>(arr: T[], seed: string) => T[];\r\n} = require(\"shuffle-seed\");\r\n\r\ntype Player = {\r\n  id: string;\r\n  name: string;\r\n  team: Team;\r\n};\r\n\r\nexport interface GameModel {\r\n  gameState: GameState;\r\n  localPlayer: Player;\r\n  clueGiver: Player | null;\r\n  spectrumCard: [string, string];\r\n  setGameState: (newState: Partial<GameState>) => void;\r\n  setPlayerName: (newName: string) => void;\r\n}\r\n\r\nconst getSeededDeck = memoize((seed: string, cards: [string, string][]) =>\r\n  shuffleSeed.shuffle(cards, seed)\r\n);\r\n\r\nexport function BuildGameModel(\r\n  gameState: GameState,\r\n  setGameState: (newState: Partial<GameState>) => void,\r\n  localPlayerId: string,\r\n  tSpectrumCards: TFunction<\"spectrum-cards\">,\r\n  setPlayerName: (newName: string) => void\r\n): GameModel {\r\n  const clueGiver = gameState.players[gameState.clueGiver]\r\n    ? {\r\n        ...gameState.players[gameState.clueGiver],\r\n        id: gameState.clueGiver,\r\n      }\r\n    : null;\r\n\r\n  type SpectrumCard = [string, string];\r\n  const basicCards = tSpectrumCards(\"basic\", {\r\n    returnObjects: true,\r\n  }) as SpectrumCard[];\r\n  const advancedCards = tSpectrumCards(\"advanced\", {\r\n    returnObjects: true,\r\n  }) as SpectrumCard[];\r\n  const AllCards = [...basicCards, ...advancedCards];\r\n  const spectrumDeck = getSeededDeck(gameState.deckSeed, AllCards);\r\n\r\n  return {\r\n    gameState,\r\n    localPlayer: {\r\n      ...gameState.players[localPlayerId],\r\n      id: localPlayerId,\r\n    },\r\n    clueGiver,\r\n    spectrumCard: spectrumDeck[gameState.deckIndex % spectrumDeck.length],\r\n    setGameState,\r\n    setPlayerName,\r\n  };\r\n}\r\n","import { RoundPhase, GameState } from \"./GameState\";\r\nimport { RandomSpectrumTarget } from \"./RandomSpectrumTarget\";\r\nimport { BuildGameModel } from \"./BuildGameModel\";\r\nimport { TFunction } from \"i18next\";\r\n\r\nexport function NewRound(\r\n  playerId: string,\r\n  gameState: GameState,\r\n  tSpectrumCards: TFunction<\"spectrum-cards\">\r\n): Partial<GameState> {\r\n  const gameModel = BuildGameModel(\r\n    gameState,\r\n    () => {},\r\n    playerId,\r\n    tSpectrumCards,\r\n    () => {}\r\n  );\r\n  Object.keys(gameState.players).forEach(\r\n    (key) => {\r\n        delete gameState.players[key].guess \r\n    }\r\n  )\r\n  const newState: Partial<GameState> = {\r\n    clueGiver: playerId,\r\n    roundPhase: RoundPhase.GiveClue,\r\n    deckIndex: gameState.deckIndex + 1,\r\n    turnsTaken: gameState.turnsTaken + 1,\r\n    spectrumTarget: RandomSpectrumTarget(),\r\n  };\r\n\r\n  if (gameModel.clueGiver !== null) {\r\n    newState.previousTurn = {\r\n      spectrumCard: gameModel.spectrumCard,\r\n      spectrumTarget: gameState.spectrumTarget,\r\n      clueGiverName: gameModel.clueGiver.name,\r\n      clue: gameState.clue,\r\n      guess: gameState.guess,\r\n    };\r\n  }\r\n\r\n  return newState;\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { GetScore } from \"../../state/GetScore\";\r\nimport { CenteredColumn, CenteredRow } from \"../common/LayoutElements\";\r\nimport { Spectrum } from \"../common/Spectrum\";\r\nimport { Button } from \"../common/Button\";\r\nimport {\r\n  GameType,\r\n  Team,\r\n  InitialGameState,\r\n  TeamName,\r\n  TeamReverse,\r\n} from \"../../state/GameState\";\r\nimport { GameModelContext } from \"../../state/GameModelContext\";\r\nimport { NewRound } from \"../../state/NewRound\";\r\nimport { Info } from \"../common/Info\";\r\n\r\nimport { Trans, useTranslation } from \"react-i18next\";\r\n\r\nexport function ViewScore() {\r\n  const { t } = useTranslation();\r\n  const { gameState, clueGiver, spectrumCard } = useContext(GameModelContext);\r\n\r\n  if (!clueGiver) {\r\n    return null;\r\n  }\r\n\r\n  let score = GetScore(gameState.spectrumTarget, gameState.guess);\r\n  let bonusCoopTurn = false;\r\n  if (gameState.gameType === GameType.Cooperative && score === 4) {\r\n    score = 3;\r\n    bonusCoopTurn = true;\r\n  }\r\n\r\n  const wasCounterGuessCorrect =\r\n    (gameState.counterGuess === \"left\" &&\r\n      gameState.spectrumTarget < gameState.guess) ||\r\n    (gameState.counterGuess === \"right\" &&\r\n      gameState.spectrumTarget > gameState.guess);\r\n  let total = 0;\r\n  Object.keys(gameState.players).forEach((key) => {\r\n    total = total + (gameState.players[key].guess ?? 0);\r\n  });\r\n  const avgValue = total / (Object.keys(gameState.players).length - 1);\r\n  gameState.guess = avgValue;\r\n  return (\r\n    <div>\r\n      <Spectrum\r\n        spectrumCard={spectrumCard}\r\n        handleValue={avgValue}\r\n        targetValue={gameState.spectrumTarget}\r\n      />\r\n      <CenteredColumn>\r\n        <div>\r\n          {t(\"viewscore.player_clue\", { givername: clueGiver.name })}:{\" \"}\r\n          <strong>{gameState.clue}</strong>\r\n        </div>\r\n        {score == 4 ? (\r\n          <div style={{ borderBottom: \"4px solid green\" }}>Perfect Score!</div>\r\n        ) : (\r\n          <div>\r\n            {t(\"viewscore.score\")}: {score} {t(\"viewscore.points\")}!\r\n          </div>\r\n        )}\r\n\r\n        {gameState.gameType === GameType.Teams && (\r\n          <div>\r\n            {TeamName(TeamReverse(clueGiver.team), t)} {t(\"viewscore.got\")}{\" \"}\r\n            {wasCounterGuessCorrect\r\n              ? t(\"viewscore.1_point_correct_guess\")\r\n              : t(\"viewscore.0_point_wrong_guess\")}\r\n          </div>\r\n        )}\r\n        {bonusCoopTurn && (\r\n          <Trans\r\n            i18nKey={t(\"viewscore.bonus_turn\") as string}\r\n            components={{\r\n              strong: <strong />,\r\n            }}\r\n          />\r\n        )}\r\n        <NextTurnOrEndGame />\r\n      </CenteredColumn>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction NextTurnOrEndGame() {\r\n  const { t, i18n } = useTranslation();\r\n  const cardsTranslation = useTranslation(\"spectrum-cards\");\r\n  const { gameState, localPlayer, clueGiver, setGameState } =\r\n    useContext(GameModelContext);\r\n\r\n  if (!clueGiver) {\r\n    return null;\r\n  }\r\n\r\n  const resetButton = (\r\n    <Button\r\n      text={t(\"viewscore.reset_game\")}\r\n      onClick={() => {\r\n        setGameState({\r\n          ...InitialGameState(i18n.language),\r\n          deckSeed: gameState.deckSeed,\r\n          deckIndex: gameState.deckIndex,\r\n        });\r\n      }}\r\n    />\r\n  );\r\n\r\n  if (gameState.leftScore >= 10 && gameState.leftScore > gameState.rightScore) {\r\n    return (\r\n      <>\r\n        <div>\r\n          {t(\"viewscore.winning_team\", { winnerteam: TeamName(Team.Left, t) })}\r\n        </div>\r\n        {resetButton}\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (\r\n    gameState.rightScore >= 10 &&\r\n    gameState.rightScore > gameState.leftScore\r\n  ) {\r\n    return (\r\n      <>\r\n        <div>\r\n          {t(\"viewscore.winning_team\", { winnerteam: TeamName(Team.Right, t) })}\r\n        </div>\r\n        {resetButton}\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (\r\n    gameState.gameType === GameType.Cooperative &&\r\n    gameState.turnsTaken >= 7 + gameState.coopBonusTurns\r\n  ) {\r\n    return (\r\n      <>\r\n        <div>{t(\"viewscore.game_finished\")}</div>\r\n        <div>\r\n          {t(\"viewscore.final_score_team\")}:{\" \"}\r\n          <strong>\r\n            {gameState.coopScore} {t(\"viewscore.points\")}\r\n          </strong>\r\n        </div>\r\n        {resetButton}\r\n      </>\r\n    );\r\n  }\r\n\r\n  const score = GetScore(gameState.spectrumTarget, gameState.guess);\r\n\r\n  const scoringTeamString = TeamName(clueGiver.team, t);\r\n\r\n  let bonusTurn = false;\r\n\r\n  const nextTeam = (() => {\r\n    if (gameState.gameType !== GameType.Teams) {\r\n      return Team.Unset;\r\n    }\r\n\r\n    if (score === 4) {\r\n      if (\r\n        gameState.leftScore < gameState.rightScore &&\r\n        clueGiver.team === Team.Left\r\n      ) {\r\n        bonusTurn = true;\r\n        return Team.Left;\r\n      }\r\n      if (\r\n        gameState.rightScore < gameState.leftScore &&\r\n        clueGiver.team === Team.Right\r\n      ) {\r\n        bonusTurn = true;\r\n        return Team.Right;\r\n      }\r\n    }\r\n\r\n    return TeamReverse(clueGiver.team);\r\n  })();\r\n\r\n  const eligibleToDraw = (() => {\r\n    if (clueGiver.id === localPlayer.id) {\r\n      return false;\r\n    }\r\n\r\n    if (gameState.gameType !== GameType.Teams) {\r\n      return true;\r\n    }\r\n\r\n    return localPlayer.team === nextTeam;\r\n  })();\r\n\r\n  return (\r\n    <>\r\n      {bonusTurn && (\r\n        <CenteredRow>\r\n          <div>\r\n            {t(\"viewscore.catching_up\", { scoringteam: scoringTeamString })}\r\n          </div>\r\n          <Info>{t(\"viewscore.catching_up_info\") as string}</Info>\r\n        </CenteredRow>\r\n      )}\r\n      {eligibleToDraw && (\r\n        <Button\r\n          text={t(\"viewscore.draw_next_card\")}\r\n          onClick={() =>\r\n            setGameState(\r\n              NewRound(localPlayer.id, gameState, cardsTranslation.t)\r\n            )\r\n          }\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { CenteredRow, CenteredColumn } from \"../common/LayoutElements\";\r\nimport { RoundPhase, Team, TeamName } from \"../../state/GameState\";\r\nimport { Button } from \"../common/Button\";\r\nimport { LongwaveAppTitle } from \"../common/Title\";\r\nimport { useContext } from \"react\";\r\nimport { GameModelContext } from \"../../state/GameModelContext\";\r\nimport { NewTeamGame } from \"../../state/NewGame\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport function JoinTeam() {\r\n  const { t } = useTranslation();\r\n  const cardsTranslation = useTranslation(\"spectrum-cards\");\r\n  const { gameState, localPlayer, setGameState } = useContext(GameModelContext);\r\n\r\n  const leftTeam = Object.keys(gameState.players).filter(\r\n    (playerId) => gameState.players[playerId].team === Team.Left\r\n  );\r\n  const rightTeam = Object.keys(gameState.players).filter(\r\n    (playerId) => gameState.players[playerId].team === Team.Right\r\n  );\r\n\r\n  const joinTeam = (team: Team) => {\r\n    setGameState({\r\n      players: {\r\n        ...gameState.players,\r\n        [localPlayer.id]: {\r\n          ...localPlayer,\r\n          team,\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  const startGame = () =>\r\n    setGameState(\r\n      NewTeamGame(\r\n        gameState.players,\r\n        localPlayer.id,\r\n        gameState,\r\n        cardsTranslation.t\r\n      )\r\n    );\r\n\r\n  return (\r\n    <CenteredColumn>\r\n      <LongwaveAppTitle />\r\n      <div>{t(\"jointeam.join_team\")}:</div>\r\n      <CenteredRow\r\n        style={{\r\n          alignItems: \"flex-start\",\r\n          alignSelf: \"stretch\",\r\n        }}\r\n      >\r\n        <CenteredColumn>\r\n          <div>{TeamName(Team.Left, t)}</div>\r\n          {leftTeam.map((playerId) => (\r\n            <div key={playerId}>{gameState.players[playerId].name}</div>\r\n          ))}\r\n          <div>\r\n            <Button\r\n              text={t(\"jointeam.join_left\")}\r\n              onClick={() => joinTeam(Team.Left)}\r\n            />\r\n          </div>\r\n        </CenteredColumn>\r\n        <CenteredColumn>\r\n          <div>{TeamName(Team.Right, t)}</div>\r\n          {rightTeam.map((playerId) => (\r\n            <div key={playerId}>{gameState.players[playerId].name}</div>\r\n          ))}\r\n          <div>\r\n            <Button\r\n              text={t(\"jointeam.join_right\")}\r\n              onClick={() => joinTeam(Team.Right)}\r\n            />\r\n          </div>\r\n        </CenteredColumn>\r\n      </CenteredRow>\r\n      {gameState.roundPhase === RoundPhase.PickTeams && (\r\n        <Button text={t(\"jointeam.start_game\")} onClick={startGame} />\r\n      )}\r\n    </CenteredColumn>\r\n  );\r\n}\r\n","import { TFunction } from \"i18next\";\r\nimport { GameType, PlayersTeams, GameState, Team } from \"./GameState\";\r\nimport { NewRound } from \"./NewRound\";\r\n\r\nexport function NewTeamGame(\r\n  players: PlayersTeams,\r\n  startPlayer: string,\r\n  gameState: GameState,\r\n  tSpectrumCards: TFunction<\"spectrum-cards\">\r\n): Partial<GameState> {\r\n  const initialScores: Partial<GameState> = {\r\n    leftScore: 0,\r\n    rightScore: 0,\r\n  };\r\n\r\n  const playerTeam = players[startPlayer].team;\r\n  if (playerTeam === Team.Left) {\r\n    initialScores.rightScore = 1;\r\n  } else {\r\n    initialScores.leftScore = 1;\r\n  }\r\n\r\n  return {\r\n    ...NewRound(startPlayer, gameState, tSpectrumCards),\r\n    ...initialScores,\r\n    previousTurn: null,\r\n    gameType: GameType.Teams,\r\n  };\r\n}\r\n","import React, { useState, useContext } from \"react\";\r\nimport { GameType, Team, TeamName } from \"../../state/GameState\";\r\nimport { CenteredRow, CenteredColumn } from \"../common/LayoutElements\";\r\nimport { GameModelContext } from \"../../state/GameModelContext\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { Animate } from \"../common/Animate\";\r\nimport { useRef } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport function Scoreboard() {\r\n  const { t } = useTranslation();\r\n  const { gameState, clueGiver } = useContext(GameModelContext);\r\n\r\n  const style = {\r\n    borderTop: \"1px solid black\",\r\n    margin: 16,\r\n    paddingTop: 16,\r\n    alignItems: \"center\",\r\n  };\r\n\r\n  if (gameState.gameType === GameType.Freeplay) {\r\n    return (\r\n      <CenteredColumn style={style}>\r\n        <em>{t(\"scoreboard.free_play\")}</em>\r\n        <CenteredRow style={{ flexWrap: \"wrap\" }}>\r\n          {Object.keys(gameState.players)\r\n            .filter((player) => player != clueGiver?.id)\r\n            .map(toPlayerRow)}\r\n        </CenteredRow>\r\n      </CenteredColumn>\r\n    );\r\n  }\r\n\r\n  if (gameState.gameType === GameType.Cooperative) {\r\n    const cardsRemaining = 7 + gameState.coopBonusTurns - gameState.turnsTaken;\r\n    return (\r\n      <CenteredColumn style={style}>\r\n        <em>\r\n          {t(\"scoreboard.coop_score\")}: {gameState.coopScore}{\" \"}\r\n          {t(\"scoreboard.points\")}\r\n        </em>\r\n        <div>\r\n          {cardsRemaining === 0\r\n            ? t(\"scoreboard.last_card\")\r\n            : t(\"scoreboard.card_remaining\") + \": \" + cardsRemaining}\r\n        </div>\r\n        <CenteredRow style={{ flexWrap: \"wrap\" }}>\r\n          {Object.keys(gameState.players).map(toPlayerRow)}\r\n        </CenteredRow>\r\n      </CenteredColumn>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <CenteredRow style={style}>\r\n      <TeamColumn team={Team.Left} score={gameState.leftScore} />\r\n      <TeamColumn team={Team.Right} score={gameState.rightScore} />\r\n    </CenteredRow>\r\n  );\r\n}\r\n\r\nfunction TeamColumn(props: { team: Team; score: number }) {\r\n  const { t } = useTranslation();\r\n  const { gameState } = useContext(GameModelContext);\r\n\r\n  const members = Object.keys(gameState.players).filter(\r\n    (playerId) => gameState.players[playerId].team === props.team\r\n  );\r\n\r\n  return (\r\n    <CenteredColumn style={{ alignItems: \"flex-start\" }}>\r\n      <div>\r\n        {TeamName(props.team, t)}: <AnimatableScore score={props.score} />{\" \"}\r\n        {t(\"scoreboard.points\")}\r\n      </div>\r\n      {members.map(toPlayerRow)}\r\n    </CenteredColumn>\r\n  );\r\n}\r\n\r\nfunction AnimatableScore(props: { score: number }) {\r\n  const lastScore = useRef(props.score);\r\n\r\n  useEffect(() => {\r\n    lastScore.current = props.score;\r\n  }, [props.score]);\r\n\r\n  if (props.score - lastScore.current === 0) {\r\n    return <span>{props.score}</span>;\r\n  }\r\n\r\n  return (\r\n    <span style={{ position: \"relative\" }}>\r\n      {props.score}\r\n      <Animate\r\n        animation=\"fade-disappear-up\"\r\n        style={{\r\n          position: \"absolute\",\r\n          fontSize: \"small\",\r\n          top: -16,\r\n          right: 0,\r\n        }}\r\n      >\r\n        +{props.score - lastScore.current}\r\n      </Animate>\r\n    </span>\r\n  );\r\n}\r\n\r\nfunction toPlayerRow(playerId: string) {\r\n  return <PlayerRow key={playerId} playerId={playerId} />;\r\n}\r\n\r\nfunction PlayerRow(props: { playerId: string }) {\r\n  const { gameState, setGameState } = useContext(GameModelContext);\r\n  const player = gameState.players[props.playerId];\r\n  const [hovered, setHovered] = useState(false);\r\n\r\n  const iconContainerStyle = {\r\n    marginLeft: 4,\r\n    width: 20,\r\n  };\r\n  let styles = {\r\n    marginLeft: 16,\r\n    display: \"flex\",\r\n    flexFlow: \"row\",\r\n    borderBottom: \"none\",\r\n  };\r\n  if (gameState.players[props.playerId].guess) {\r\n    styles = { ...styles, borderBottom: \"1px solid black\" };\r\n  }\r\n  return (\r\n    <div\r\n      style={styles}\r\n      onMouseEnter={() => setHovered(true)}\r\n      onMouseLeave={() => setHovered(false)}\r\n    >\r\n      {player.name}\r\n      <div style={iconContainerStyle} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { GameType, RoundPhase } from \"../../state/GameState\";\r\nimport { CenteredRow, CenteredColumn } from \"../common/LayoutElements\";\r\nimport { Button } from \"../common/Button\";\r\nimport { LongwaveAppTitle } from \"../common/Title\";\r\nimport { useContext } from \"react\";\r\nimport { GameModelContext } from \"../../state/GameModelContext\";\r\nimport { NewRound } from \"../../state/NewRound\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport function SetupGame() {\r\n  const { t } = useTranslation();\r\n  const cardsTranslation = useTranslation(\"spectrum-cards\");\r\n  const { gameState, setGameState, localPlayer } = useContext(GameModelContext);\r\n\r\n  const startGame = (gameType: GameType) => {\r\n    if (gameType === GameType.Teams) {\r\n      setGameState({\r\n        roundPhase: RoundPhase.PickTeams,\r\n        gameType,\r\n      });\r\n    } else {\r\n      setGameState({\r\n        ...NewRound(localPlayer.id, gameState, cardsTranslation.t),\r\n        gameType,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CenteredColumn>\r\n      <LongwaveAppTitle />\r\n      <CenteredRow style={{ flexWrap: \"wrap\" }}>\r\n        <Button\r\n          text={t(\"setupgame.free_game\")}\r\n          onClick={() => startGame(GameType.Freeplay)}\r\n        />\r\n      </CenteredRow>\r\n    </CenteredColumn>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { TeamReverse, TeamName } from \"../../state/GameState\";\r\nimport { Spectrum } from \"../common/Spectrum\";\r\nimport { CenteredColumn, CenteredRow } from \"../common/LayoutElements\";\r\nimport { Button } from \"../common/Button\";\r\nimport { GameModelContext } from \"../../state/GameModelContext\";\r\nimport { ScoreTeamRound } from \"../../state/ScoreRound\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport function CounterGuess() {\r\n  const { t } = useTranslation();\r\n\r\n  const {\r\n    gameState,\r\n    localPlayer,\r\n    clueGiver,\r\n    spectrumCard,\r\n    setGameState,\r\n  } = useContext(GameModelContext);\r\n\r\n  if (!clueGiver) {\r\n    return null;\r\n  }\r\n\r\n  const notMyTurn = clueGiver.team === localPlayer.team;\r\n  const counterGuessTeamString = TeamName(TeamReverse(clueGiver.team), t);\r\n\r\n  if (notMyTurn) {\r\n    return (\r\n      <div>\r\n        <Spectrum spectrumCard={spectrumCard} guessingValue={gameState.guess} />\r\n        <CenteredColumn>\r\n          <div>\r\n            {t(\"counterguess.players_clue\", { givername: clueGiver.name })}:{\" \"}\r\n            <strong>{gameState.clue}</strong>\r\n          </div>\r\n          <div>\r\n            {t(\"counterguess.waiting_guess_team\", {\r\n              guessteam: counterGuessTeamString,\r\n            })}\r\n          </div>\r\n        </CenteredColumn>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Spectrum spectrumCard={spectrumCard} guessingValue={gameState.guess} />\r\n      <CenteredColumn>\r\n        <div>\r\n          {t(\"counterguess.players_clue\", { givername: clueGiver.name })}:{\" \"}\r\n          <strong>{gameState.clue}</strong>\r\n        </div>\r\n      </CenteredColumn>\r\n      <CenteredRow>\r\n        <Button\r\n          text={t(\"counterguess.more_left\")}\r\n          onClick={() =>\r\n            setGameState(ScoreTeamRound(gameState, clueGiver.team, \"left\"))\r\n          }\r\n        />\r\n        <Button\r\n          text={t(\"counterguess.more_right\")}\r\n          onClick={() =>\r\n            setGameState(ScoreTeamRound(gameState, clueGiver.team, \"right\"))\r\n          }\r\n        />\r\n      </CenteredRow>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { RoundPhase, GameType, Team } from \"../../state/GameState\";\r\nimport { GiveClue } from \"./GiveClue\";\r\nimport { MakeGuess } from \"./MakeGuess\";\r\nimport { ViewScore } from \"./ViewScore\";\r\nimport { JoinTeam } from \"./JoinTeam\";\r\nimport { Scoreboard } from \"./Scoreboard\";\r\nimport { SetupGame } from \"./SetupGame\";\r\nimport { CounterGuess } from \"./CounterGuess\";\r\nimport { useContext } from \"react\";\r\nimport { GameModelContext } from \"../../state/GameModelContext\";\r\nimport { PreviousTurnResult } from \"./PreviousTurnResult\";\r\n\r\nexport function ActiveGame() {\r\n  const { gameState, localPlayer } = useContext(GameModelContext);\r\n\r\n  if (gameState.roundPhase === RoundPhase.SetupGame) {\r\n    return <SetupGame />;\r\n  }\r\n\r\n  if (\r\n    gameState.gameType === GameType.Teams &&\r\n    (gameState.roundPhase === RoundPhase.PickTeams ||\r\n      localPlayer.team === Team.Unset)\r\n  ) {\r\n    return <JoinTeam />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {gameState.roundPhase === RoundPhase.GiveClue && <GiveClue />}\r\n      {gameState.roundPhase === RoundPhase.MakeGuess && <MakeGuess />}\r\n      {gameState.roundPhase === RoundPhase.CounterGuess && <CounterGuess />}\r\n      {gameState.roundPhase === RoundPhase.ViewScore && <ViewScore />}\r\n      <Scoreboard />\r\n      {/* {gameState.previousTurn && (\r\n        <PreviousTurnResult {...gameState.previousTurn} />\r\n      )} */}\r\n    </>\r\n  );\r\n}\r\n","import { useParams } from \"react-router-dom\";\r\nimport { CenteredRow } from \"./LayoutElements\";\r\nimport { faCogs, faUserEdit } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faUndo } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Tippy from \"@tippyjs/react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useContext } from \"react\";\r\nimport { GameModelContext } from \"../../state/GameModelContext\";\r\nimport { InitialGameState } from \"../../state/GameState\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport function RoomIdHeader() {\r\n  const { t } = useTranslation();\r\n  const { roomId }: { [k: string]: any } = useParams();\r\n\r\n  return (\r\n    <CenteredRow\r\n      style={{\r\n        justifyContent: \"flex-end\",\r\n        alignItems: \"center\",\r\n        color: \"gray\",\r\n      }}\r\n    >\r\n      <div style={{ margin: 4, padding: 4 }}>\r\n        {t(\"roomidheader.roomid\")} {roomId}\r\n      </div>\r\n      <Tippy content={<RoomMenu />} interactive placement=\"bottom-end\">\r\n        <div tabIndex={0} style={{ padding: 8 }}>\r\n          <FontAwesomeIcon icon={faCogs} />\r\n        </div>\r\n      </Tippy>\r\n    </CenteredRow>\r\n  );\r\n}\r\n\r\nfunction RoomMenu() {\r\n  const { t, i18n } = useTranslation();\r\n  const { setGameState, setPlayerName } = useContext(GameModelContext);\r\n\r\n  const menuItemProps = {\r\n    style: { margin: 8, cursor: \"pointer\" },\r\n    tabIndex: 0,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        {...menuItemProps}\r\n        onClick={() => setGameState(InitialGameState(i18n.language))}\r\n      >\r\n        <FontAwesomeIcon icon={faUndo} /> {t(\"roomidheader.reset_room\")}\r\n      </div>\r\n      <div {...menuItemProps} onClick={() => setPlayerName(\"\")}>\r\n        <FontAwesomeIcon icon={faUserEdit} /> {t(\"roomidheader.change_name\")}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { GameModelContext } from \"../../state/GameModelContext\";\r\nimport { ActiveGame } from \"./ActiveGame\";\r\nimport { BuildGameModel } from \"../../state/BuildGameModel\";\r\nimport { CenteredRow, CenteredColumn } from \"../common/LayoutElements\";\r\nimport {\r\n  InitialGameState,\r\n  GameState,\r\n  Team,\r\n  GameType,\r\n  RoundPhase,\r\n} from \"../../state/GameState\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport function FakeRooms() {\r\n  const cardsTranslation = useTranslation(\"spectrum-cards\");\r\n\r\n  const [gameState, setGameState] = useState<GameState>({\r\n    ...InitialGameState(cardsTranslation.i18n.language),\r\n    gameType: GameType.Teams,\r\n    roundPhase: RoundPhase.PickTeams,\r\n    players: {\r\n      ul: {\r\n        name: \"Upper Left\",\r\n        team: Team.Left,\r\n      },\r\n      ll: {\r\n        name: \"Lower Left\",\r\n        team: Team.Left,\r\n      },\r\n      ur: {\r\n        name: \"Upper Right\",\r\n        team: Team.Right,\r\n      },\r\n      lr: {\r\n        name: \"Lower Right\",\r\n        team: Team.Right,\r\n      },\r\n    },\r\n  });\r\n\r\n  const setPartialGameState = (newState: Partial<GameState>) =>\r\n    setGameState({\r\n      ...gameState,\r\n      ...newState,\r\n    });\r\n\r\n  const style: React.CSSProperties = {\r\n    width: 500,\r\n    margin: 4,\r\n    padding: 4,\r\n    border: \"1px solid black\",\r\n  };\r\n\r\n  const renderGame = (playerId: string) => (\r\n    <div style={style}>\r\n      <GameModelContext.Provider\r\n        value={BuildGameModel(\r\n          gameState,\r\n          setPartialGameState,\r\n          playerId,\r\n          cardsTranslation.t,\r\n          () => {}\r\n        )}\r\n      >\r\n        <ActiveGame />\r\n      </GameModelContext.Provider>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <CenteredRow\r\n      style={{ alignItems: \"stretch\", position: \"absolute\", top: 100, left: 0 }}\r\n    >\r\n      <CenteredColumn\r\n        style={{\r\n          alignItems: \"stretch\",\r\n          justifyContent: \"space-between\",\r\n        }}\r\n      >\r\n        {renderGame(\"ul\")}\r\n        {renderGame(\"ll\")}\r\n      </CenteredColumn>\r\n      <CenteredColumn\r\n        style={{\r\n          alignItems: \"stretch\",\r\n          justifyContent: \"space-between\",\r\n        }}\r\n      >\r\n        {renderGame(\"ur\")}\r\n        {renderGame(\"lr\")}\r\n      </CenteredColumn>\r\n    </CenteredRow>\r\n  );\r\n}\r\n","import { useParams } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport { useStorageBackedState } from \"../hooks/useStorageBackedState\";\r\nimport { useNetworkBackedGameState } from \"../hooks/useNetworkBackedGameState\";\r\nimport { InputName } from \"./InputName\";\r\nimport { RandomFourCharacterString } from \"../../state/RandomFourCharacterString\";\r\nimport { GameModelContext } from \"../../state/GameModelContext\";\r\nimport { ActiveGame } from \"./ActiveGame\";\r\nimport { BuildGameModel } from \"../../state/BuildGameModel\";\r\nimport { RoomIdHeader } from \"../common/RoomIdHeader\";\r\nimport { FakeRooms } from \"./FakeRooms\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport function GameRoom() {\r\n  const { roomId } = useParams<{ roomId: string }>();\r\n  if (roomId === undefined) {\r\n    throw new Error(\"RoomId missing\");\r\n  }\r\n\r\n  const [playerName, setPlayerName] = useStorageBackedState(\"\", \"name\");\r\n\r\n  const [playerId] = useStorageBackedState(\r\n    RandomFourCharacterString(),\r\n    \"playerId\"\r\n  );\r\n\r\n  const [gameState, setGameState] = useNetworkBackedGameState(\r\n    roomId,\r\n    playerId,\r\n    playerName\r\n  );\r\n\r\n  const cardsTranslation = useTranslation(\"spectrum-cards\");\r\n\r\n  if (\r\n    gameState.deckLanguage !== null &&\r\n    cardsTranslation.i18n.language !== gameState.deckLanguage\r\n  ) {\r\n    cardsTranslation.i18n.changeLanguage(gameState.deckLanguage);\r\n    return null;\r\n  }\r\n\r\n  if (roomId === \"MULTIPLAYER_TEST\") {\r\n    return <FakeRooms />;\r\n  }\r\n\r\n  const gameModel = BuildGameModel(\r\n    gameState,\r\n    setGameState,\r\n    playerId,\r\n    cardsTranslation.t,\r\n    setPlayerName\r\n  );\r\n\r\n  if (playerName.length === 0) {\r\n    return (\r\n      <InputName\r\n        setName={(name) => {\r\n          setPlayerName(name);\r\n          gameState.players[playerId].name = name;\r\n          setGameState(gameState);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  const searchParams = new URLSearchParams(window.location.search);\r\n  if (searchParams.get(\"rocketcrab\")) {\r\n    const rocketcrabPlayerName = searchParams.get(\"name\");\r\n    if (rocketcrabPlayerName !== null && rocketcrabPlayerName !== playerName) {\r\n      setPlayerName(rocketcrabPlayerName);\r\n    }\r\n  }\r\n\r\n  if (!gameState?.players?.[playerId]) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <GameModelContext.Provider value={gameModel}>\r\n      <RoomIdHeader />\r\n      <ActiveGame />\r\n    </GameModelContext.Provider>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\nimport { GameState, InitialGameState, Team } from \"../../state/GameState\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nexport function useNetworkBackedGameState(\r\n  roomId: string,\r\n  playerId: string,\r\n  playerName: string\r\n): [GameState, (newState: Partial<GameState>) => void] {\r\n  const { i18n } = useTranslation(\"spectrum-cards\");\r\n  const [gameState, setGameState] = useState<GameState>(\r\n    InitialGameState(i18n.language)\r\n  );\r\n\r\n  useEffect(() => {\r\n    const dbRef = firebase.database().ref(\"rooms/\" + roomId);\r\n\r\n    dbRef.on(\"value\", (appState) => {\r\n      const networkGameState: GameState = appState.val();\r\n      const completeGameState = {\r\n        ...InitialGameState(i18n.language),\r\n        ...networkGameState,\r\n      };\r\n\r\n      if (networkGameState?.roundPhase === undefined) {\r\n        dbRef.set(completeGameState);\r\n        return;\r\n      }\r\n\r\n      if (completeGameState.players[playerId] === undefined) {\r\n        completeGameState.players[playerId] = {\r\n          name: playerName,\r\n          team: Team.Unset,\r\n        };\r\n        dbRef.set(completeGameState);\r\n        return;\r\n      }\r\n\r\n      setGameState(completeGameState);\r\n    });\r\n    return () => dbRef.off();\r\n  }, [playerId, playerName, roomId, i18n]);\r\n\r\n  const dbRef = firebase.database().ref(\"rooms/\" + roomId);\r\n\r\n  return [\r\n    gameState,\r\n    (newState: Partial<GameState>) => {\r\n      dbRef.set({\r\n        ...gameState,\r\n        ...newState,\r\n      });\r\n    },\r\n  ];\r\n}\r\n","import { useTranslation } from \"react-i18next\";\r\nimport { CenteredColumn, CenteredRow } from \"./LayoutElements\";\r\n\r\nexport function CommonFooter() {\r\n  const { t } = useTranslation();\r\n\r\n  return (\r\n    <CenteredRow\r\n      style={{\r\n        paddingTop: 8,\r\n        borderTop: \"1px solid black\",\r\n        color: \"gray\",\r\n        fontSize: \"small\",\r\n      }}\r\n    >\r\n      <CenteredColumn>\r\n        <p style={{ margin: 8 }}>\r\n          <Link href=\"https://www.wavelength.zone\" text=\"Wavelength\" />{\" \"}\r\n          {t(\"commonfooter.developed_by\")}{\" \"}\r\n          <Link\r\n            href=\"https://github.com/cynicaloptimist/longwave\"\r\n            text={t(\"commonfooter.adapted_for_web\")}\r\n          />{\" \"}\r\n          {t(\"commonfooter.adapted_for_web_by\")}\r\n        </p>\r\n        {/* we want referrer, so: */}\r\n        {/* eslint-disable-next-line react/jsx-no-target-blank */}\r\n      </CenteredColumn>\r\n    </CenteredRow>\r\n  );\r\n}\r\n\r\nfunction Link(props: { href: string; text: string }) {\r\n  return (\r\n    <a href={props.href} target=\"_blank\" rel=\"noopener noreferrer\">\r\n      {props.text}\r\n    </a>\r\n  );\r\n}\r\n\r\nfunction AffiliateLink() {\r\n  return (\r\n    /* eslint-disable-next-line react/jsx-no-target-blank */\r\n    <a\r\n      target=\"_blank\"\r\n      href=\"https://www.amazon.com/gp/product/B07T446163/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B07T446163&linkCode=as2&tag=cynicalopti09-20&linkId=0bb4d74ae01b9f1846ae6c8797ef1a47\"\r\n    >\r\n      <img\r\n        alt=\"Longwave board game on Amazon\"\r\n        src=\"//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=US&ASIN=B07T446163&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL110_&tag=cynicalopti09-20\"\r\n      />\r\n    </a>\r\n  );\r\n}\r\n","import i18n from \"i18next\";\r\nimport Backend from \"i18next-http-backend\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nexport const allLanguages = [\"en\", \"de\", \"fr\", \"pt-BR\", \"it\"];\r\n\r\ni18n\r\n  // Enables the i18next backend\r\n  .use(Backend)\r\n  // Enable automatic language detection\r\n  .use(LanguageDetector)\r\n  // Enables the hook initialization module\r\n  .use(initReactI18next)\r\n  .init({\r\n    // Standard language used\r\n    fallbackLng: \"en\",\r\n    //debug: true,\r\n    //Detects and caches a cookie from the language provided\r\n    detection: {\r\n      order: [\"queryString\", \"cookie\"],\r\n      caches: [\"cookie\"],\r\n    },\r\n    interpolation: {\r\n      escapeValue: false,\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n","import { useHistory } from \"react-router-dom\";\r\nimport { RandomFourCharacterString } from \"../../state/RandomFourCharacterString\";\r\nimport { CenteredColumn, CenteredRow } from \"./LayoutElements\";\r\nimport { Button } from \"./Button\";\r\nimport { LongwaveAppTitle } from \"./Title\";\r\n\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { allLanguages } from \"../../i18n\";\r\nimport { faLanguage } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { Tooltip } from \"react-tippy\";\r\n\r\nexport function LandingPage() {\r\n  const { t } = useTranslation();\r\n\r\n  const history = useHistory();\r\n  return (\r\n    <CenteredColumn>\r\n      <LongwaveAppTitle />\r\n      <CenteredRow>\r\n        <Button\r\n          text={t(\"landingpage.create_room\")}\r\n          onClick={() => {\r\n            history.push(\"/\" + RandomFourCharacterString());\r\n          }}\r\n        />\r\n        <LanguageMenu />\r\n      </CenteredRow>\r\n      <p style={{ margin: 8 }}>\r\n        <strong>{t(\"landingpage.longwave\")}</strong>{\" \"}\r\n        {t(\"landingpage.adaptation\")} <em>{t(\"landingpage.wavelength\")}</em>.{\" \"}\r\n        {t(\"landingpage.best_enjoyed\")}\r\n      </p>\r\n    </CenteredColumn>\r\n  );\r\n}\r\n\r\nfunction LanguageMenu() {\r\n  return (\r\n    <Tooltip\r\n      interactive\r\n      position=\"bottom\"\r\n      sticky\r\n      tabIndex={0}\r\n      html={<Languages />}\r\n    >\r\n      <FontAwesomeIcon size=\"lg\" icon={faLanguage} />\r\n    </Tooltip>\r\n  );\r\n}\r\n\r\nfunction Languages() {\r\n  const { i18n } = useTranslation();\r\n\r\n  return (\r\n    <CenteredColumn\r\n      style={{\r\n        backgroundColor: \"white\",\r\n        border: \"1px solid black\",\r\n        padding: 6,\r\n      }}\r\n    >\r\n      {allLanguages.map((language) => {\r\n        return (\r\n          <div\r\n            key={language}\r\n            style={{ cursor: \"pointer\" }}\r\n            tabIndex={0}\r\n            onClick={() => {\r\n              i18n.changeLanguage(language);\r\n            }}\r\n          >\r\n            {language}\r\n          </div>\r\n        );\r\n      })}\r\n    </CenteredColumn>\r\n  );\r\n}\r\n","import \"../App.css\";\r\n\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport { GameRoom } from \"./gameplay/GameRoom\";\r\nimport { CenteredColumn } from \"./common/LayoutElements\";\r\nimport { CommonFooter } from \"./common/CommonFooter\";\r\nimport { LandingPage } from \"./common/LandingPage\";\r\n\r\nconst style: React.CSSProperties = {\r\n  maxWidth: 500,\r\n  margin: 4,\r\n  padding: 4,\r\n  border: \"1px solid black\",\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <CenteredColumn>\r\n      <div style={style}>\r\n        <BrowserRouter>\r\n          <Switch>\r\n            <Route path=\"/:roomId\">\r\n              <GameRoom />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <LandingPage />\r\n            </Route>\r\n          </Switch>\r\n          <CommonFooter />\r\n        </BrowserRouter>\r\n      </div>\r\n    </CenteredColumn>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import \"./index.css\";\r\nimport \"rc-slider/assets/index.css\";\r\nimport \"tippy.js/dist/tippy.css\";\r\n\r\nimport React, { Suspense } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport firebase from \"firebase/app\";\r\n\r\nimport App from \"./components/App\";\r\nimport { firebaseConfig } from \"./firebaseConfig\";\r\n\r\n// import i18n (needs to be bundled ;))\r\nimport \"./i18n\";\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n// firebase.analytics().logEvent(\"screen_view\", {\r\n//   app_name: \"Longwave\",\r\n//   screen_name: \"index\",\r\n// });\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Suspense fallback={<div>Loading...</div>}>\r\n      <App />\r\n    </Suspense>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n//ReactDOM.render(\r\n//  <React.StrictMode>\r\n//            <App/>\r\n//  </React.StrictMode>,\r\n//  document.getElementById(\"root\")\r\n//);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","export const firebaseConfig = {\r\n  apiKey: \"AIzaSyBOlTgRRwiSPNJFY66ERhztAmylHGx1uPg\",\r\n  authDomain: \"wavelength-57435.firebaseapp.com\",\r\n  projectId: \"wavelength-57435\",\r\n  storageBucket: \"wavelength-57435.appspot.com\",\r\n  messagingSenderId: \"759613809110\",\r\n  appId: \"1:759613809110:web:cd9f1f2e69bfed792bc477\",\r\n  measurementId: \"G-EL22HVEVTF\",\r\n  databaseURL: \"https://wavelength-57435-default-rtdb.firebaseio.com/\"\r\n};"],"sourceRoot":""}